<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>REST &#8211; API UX</title>
	<atom:link href="/tag/rest/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Everything about API User Experience</description>
	<lastBuildDate>Tue, 24 Sep 2013 09:28:58 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.8.6</generator>
	<item>
		<title>Nordic APIs conference wrap-up</title>
		<link>/2013/09/24/nordic-apis-wrap-up/?utm_source=rss&#038;utm_medium=rss&#038;utm_campaign=nordic-apis-wrap-up</link>
					<comments>/2013/09/24/nordic-apis-wrap-up/#comments</comments>
		
		<dc:creator><![CDATA[Andreas Krohn]]></dc:creator>
		<pubDate>Tue, 24 Sep 2013 16:00:23 +0000</pubDate>
				<category><![CDATA[Conference]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[conference]]></category>
		<category><![CDATA[developer]]></category>
		<category><![CDATA[nordic]]></category>
		<category><![CDATA[presentation]]></category>
		<category><![CDATA[REST]]></category>
		<category><![CDATA[speakers]]></category>
		<category><![CDATA[Stockholm]]></category>
		<category><![CDATA[Sweden]]></category>
		<category><![CDATA[wrap-up]]></category>
		<guid isPermaLink="false">/?p=669</guid>

					<description><![CDATA[The biggest Nordic APIs conference to date was held in Stockholm, Sweden 18-19 September, 2013. As one of the organizers I am proud to say everything went very well and that we did what we set out to do &#8211; which was to create a place for the API community in the Nordics to meet in person. [&#8230;]]]></description>
		
					<wfw:commentRss>/2013/09/24/nordic-apis-wrap-up/feed/</wfw:commentRss>
			<slash:comments>1</slash:comments>
		
		
			</item>
		<item>
		<title>Webhooks, REST and the Open Web</title>
		<link>/2013/09/12/webhooks/?utm_source=rss&#038;utm_medium=rss&#038;utm_campaign=webhooks</link>
					<comments>/2013/09/12/webhooks/#comments</comments>
		
		<dc:creator><![CDATA[Bruno Pedro]]></dc:creator>
		<pubDate>Thu, 12 Sep 2013 16:08:19 +0000</pubDate>
				<category><![CDATA[Opinion]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[hook]]></category>
		<category><![CDATA[HTTP]]></category>
		<category><![CDATA[Open]]></category>
		<category><![CDATA[ping]]></category>
		<category><![CDATA[protocol]]></category>
		<category><![CDATA[publish]]></category>
		<category><![CDATA[pubsubhubbub]]></category>
		<category><![CDATA[REST]]></category>
		<category><![CDATA[specification]]></category>
		<category><![CDATA[standard]]></category>
		<category><![CDATA[subscription]]></category>
		<category><![CDATA[Web]]></category>
		<category><![CDATA[webhook]]></category>
		<guid isPermaLink="false">/?p=495</guid>

					<description><![CDATA[Back in 2006, Jeff Lindsay proposed a different way of consuming Web resources that would eliminate the need for constantly polling APIs for changes. This new pattern was called webhooks and has since been adopted by companies such as GitHub and Google. The main advantage of the webhooks pattern is that your application doesn&#8217;t have to make [&#8230;]]]></description>
		
					<wfw:commentRss>/2013/09/12/webhooks/feed/</wfw:commentRss>
			<slash:comments>8</slash:comments>
		
		
			</item>
		<item>
		<title>HTTP/2.0 Initial Draft Released</title>
		<link>/2013/07/23/http2-0-initial-draft-released/?utm_source=rss&#038;utm_medium=rss&#038;utm_campaign=http2-0-initial-draft-released</link>
					<comments>/2013/07/23/http2-0-initial-draft-released/#respond</comments>
		
		<dc:creator><![CDATA[Michael Pratt]]></dc:creator>
		<pubDate>Tue, 23 Jul 2013 16:00:50 +0000</pubDate>
				<category><![CDATA[Opinion]]></category>
		<category><![CDATA[Review]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[draft]]></category>
		<category><![CDATA[HTTP]]></category>
		<category><![CDATA[httpbis]]></category>
		<category><![CDATA[iesg]]></category>
		<category><![CDATA[ietf]]></category>
		<category><![CDATA[REST]]></category>
		<category><![CDATA[Standards]]></category>
		<guid isPermaLink="false">/?p=572</guid>

					<description><![CDATA[The first implementable draft of HTTP/2.0 was released on July 8th by the HTTPbis working group of the IETF. The new version feels similar to the old, but there are important differences designed to enable more efficient network communication.]]></description>
		
					<wfw:commentRss>/2013/07/23/http2-0-initial-draft-released/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Review: Google Glass API</title>
		<link>/2013/04/17/review-google-glass-api/?utm_source=rss&#038;utm_medium=rss&#038;utm_campaign=review-google-glass-api</link>
					<comments>/2013/04/17/review-google-glass-api/#comments</comments>
		
		<dc:creator><![CDATA[Bruno Pedro]]></dc:creator>
		<pubDate>Wed, 17 Apr 2013 16:00:31 +0000</pubDate>
				<category><![CDATA[Review]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[endpoint]]></category>
		<category><![CDATA[Glass]]></category>
		<category><![CDATA[Glassware]]></category>
		<category><![CDATA[Google]]></category>
		<category><![CDATA[Mirror]]></category>
		<category><![CDATA[REST]]></category>
		<category><![CDATA[review]]></category>
		<category><![CDATA[timeline]]></category>
		<guid isPermaLink="false">/?p=296</guid>

					<description><![CDATA[Since Google's announcement of Glass people have been wondering on the possible applications that can be built on it and how it might increase one's productivity. Well, your wait is over now, because Google has just recently released the documentation on how to interact with Glass through their Mirror API.]]></description>
		
					<wfw:commentRss>/2013/04/17/review-google-glass-api/feed/</wfw:commentRss>
			<slash:comments>3</slash:comments>
		
		
			</item>
		<item>
		<title>How to Expose User Information</title>
		<link>/2013/04/11/how-to-expose-user-information/?utm_source=rss&#038;utm_medium=rss&#038;utm_campaign=how-to-expose-user-information</link>
					<comments>/2013/04/11/how-to-expose-user-information/#comments</comments>
		
		<dc:creator><![CDATA[Bruno Pedro]]></dc:creator>
		<pubDate>Thu, 11 Apr 2013 16:00:16 +0000</pubDate>
				<category><![CDATA[Opinion]]></category>
		<category><![CDATA[Security]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[business]]></category>
		<category><![CDATA[expose]]></category>
		<category><![CDATA[information]]></category>
		<category><![CDATA[JSON]]></category>
		<category><![CDATA[REST]]></category>
		<category><![CDATA[sensitive]]></category>
		<category><![CDATA[user]]></category>
		<category><![CDATA[UX]]></category>
		<guid isPermaLink="false">/?p=275</guid>

					<description><![CDATA[If you provide the right amount of information, applications built on top of your API will be able to offer a better service to your users. Your final user will have a better experience and that might turn out to generate more business for you.]]></description>
		
					<wfw:commentRss>/2013/04/11/how-to-expose-user-information/feed/</wfw:commentRss>
			<slash:comments>3</slash:comments>
		
		
			</item>
		<item>
		<title>An Overview of REST Metadata Formats</title>
		<link>/2013/04/09/rest-metadata-formats/?utm_source=rss&#038;utm_medium=rss&#038;utm_campaign=rest-metadata-formats</link>
					<comments>/2013/04/09/rest-metadata-formats/#comments</comments>
		
		<dc:creator><![CDATA[Ole Lensmar]]></dc:creator>
		<pubDate>Tue, 09 Apr 2013 16:00:55 +0000</pubDate>
				<category><![CDATA[Opinion]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[HAL]]></category>
		<category><![CDATA[hypermedia]]></category>
		<category><![CDATA[JSON]]></category>
		<category><![CDATA[metadata]]></category>
		<category><![CDATA[QoS]]></category>
		<category><![CDATA[REST]]></category>
		<category><![CDATA[schema]]></category>
		<category><![CDATA[security]]></category>
		<category><![CDATA[WADL]]></category>
		<category><![CDATA[WSDL]]></category>
		<category><![CDATA[XML]]></category>
		<guid isPermaLink="false">/?p=264</guid>

					<description><![CDATA[Although the REST community initially took a stance against metadata for REST APIs, a number of metadata standards have none-the-less emerged over the last couple of years, mainly fueled by the need to document APIs for their consumers.]]></description>
		
					<wfw:commentRss>/2013/04/09/rest-metadata-formats/feed/</wfw:commentRss>
			<slash:comments>10</slash:comments>
		
		
			</item>
		<item>
		<title>URL Design for RESTful Web Services</title>
		<link>/2013/04/03/url-design-restful-web-services/?utm_source=rss&#038;utm_medium=rss&#038;utm_campaign=url-design-restful-web-services</link>
					<comments>/2013/04/03/url-design-restful-web-services/#comments</comments>
		
		<dc:creator><![CDATA[Charlie Reverte]]></dc:creator>
		<pubDate>Wed, 03 Apr 2013 16:00:54 +0000</pubDate>
				<category><![CDATA[Opinion]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[design]]></category>
		<category><![CDATA[endpoint]]></category>
		<category><![CDATA[filesystem]]></category>
		<category><![CDATA[HTTP]]></category>
		<category><![CDATA[REST]]></category>
		<category><![CDATA[URL]]></category>
		<category><![CDATA[Web service]]></category>
		<guid isPermaLink="false">/?p=233</guid>

					<description><![CDATA[URL design discussions for RESTful web services often degrade into debates over pluralization and parameter names. There are a couple of principles I like to use to keep things simple.]]></description>
		
					<wfw:commentRss>/2013/04/03/url-design-restful-web-services/feed/</wfw:commentRss>
			<slash:comments>12</slash:comments>
		
		
			</item>
		<item>
		<title>2 steps to better API Error Codes</title>
		<link>/2013/03/28/2-steps-api-error-codes/?utm_source=rss&#038;utm_medium=rss&#038;utm_campaign=2-steps-api-error-codes</link>
					<comments>/2013/03/28/2-steps-api-error-codes/#comments</comments>
		
		<dc:creator><![CDATA[Bruno Pedro]]></dc:creator>
		<pubDate>Thu, 28 Mar 2013 17:00:03 +0000</pubDate>
				<category><![CDATA[Opinion]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[code]]></category>
		<category><![CDATA[developer]]></category>
		<category><![CDATA[error]]></category>
		<category><![CDATA[HTTP]]></category>
		<category><![CDATA[integration]]></category>
		<category><![CDATA[JSON]]></category>
		<category><![CDATA[REST]]></category>
		<category><![CDATA[RFC 2616]]></category>
		<category><![CDATA[steps]]></category>
		<category><![CDATA[UX]]></category>
		<category><![CDATA[XML.protocol]]></category>
		<guid isPermaLink="false">/?p=171</guid>

					<description><![CDATA[One of the biggest difficulties developers can have when writing code that talks with an API is dealing with errors and exceptions, and translating those errors into something meaningful for their applications.]]></description>
		
					<wfw:commentRss>/2013/03/28/2-steps-api-error-codes/feed/</wfw:commentRss>
			<slash:comments>14</slash:comments>
		
		
			</item>
		<item>
		<title>Authentication: Don&#8217;t be Clever</title>
		<link>/2013/03/21/authentication-dont-be-clever/?utm_source=rss&#038;utm_medium=rss&#038;utm_campaign=authentication-dont-be-clever</link>
					<comments>/2013/03/21/authentication-dont-be-clever/#comments</comments>
		
		<dc:creator><![CDATA[John Sheehan]]></dc:creator>
		<pubDate>Thu, 21 Mar 2013 17:00:00 +0000</pubDate>
				<category><![CDATA[Opinion]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[authentication]]></category>
		<category><![CDATA[credential]]></category>
		<category><![CDATA[developer]]></category>
		<category><![CDATA[error message]]></category>
		<category><![CDATA[HTTP]]></category>
		<category><![CDATA[JSON]]></category>
		<category><![CDATA[OAuth]]></category>
		<category><![CDATA[REST]]></category>
		<guid isPermaLink="false">/?p=112</guid>

					<description><![CDATA[HTTP API authentication has evolved through many forms over the years. As so-called RESTful APIs gained popularity, a variety of methods sprung up: key passing, plain-old HTTP Basic Auth, OAuth 1.0, OAuth 1.0a, OAuth 2.0 (and it&#8217;s 40 revision) and some less-common custom schemes. With the OAuth 2.0 specification finalized, things are finally starting to [&#8230;]]]></description>
		
					<wfw:commentRss>/2013/03/21/authentication-dont-be-clever/feed/</wfw:commentRss>
			<slash:comments>14</slash:comments>
		
		
			</item>
	</channel>
</rss>
